#!/usr/bin/env php
<?php

define('SOURCE_BRANCH', 'development');
define('TARGET_BRANCH', 'master');

function commandOrFail(string $command, bool $expectsEmptyOutput = false, ?string $failureReason = null): array
{
	$code = 0;
	$output = [];
	exec($command, $output, $code);
	if (0 < $code || ($expectsEmptyOutput && 0 < count($output))) {
		$message = ' ! Command failed! ' . $command;
        if ($failureReason) {
            $message .= PHP_EOL;
            $message .= 'Reason for failure: ' . $failureReason;
        }
		if ($expectsEmptyOutput) {
			$message .= PHP_EOL;
			$message .= ' ! No output was expected from command but output occurred:';
			$message .= implode(PHP_EOL, $output);
		}
		exitWithMessage($message, ($expectsEmptyOutput && 0 === $code) ? 1 : $code);
	}
	return $output;
}

function exitWithMessage(string $message, int $code = 0): void
{
	echo $message;
	echo PHP_EOL;
	exit($code);
}

function message(string $message, string $mark = '✓'): void
{
	echo sprintf(' %s ' . $message, $mark);
	echo PHP_EOL;
}

// Declare variables used by script below
$repository = pathinfo(trim(shell_exec('pwd')), PATHINFO_FILENAME);
$repositoryAddress = sprintf('https://github.com/FluidTYPO3/%s.git', $repository);
$delay = 10;
$version = $argv[1];
$stability = isset($argv[2]) ? $argv[2] : 'stable';
if (empty($version)) {
    exitWithMessage('Command requires version as first argument', 1);
}
$stabilities = ['stable', 'beta', 'alpha', 'experimental', 'obsolete'];
if (!in_array($stability, $stabilities)) {
    exitWithMessage(sprintf('Provided stability "%s" is not valid. Valid values: ' . implode(', ', $stabilities), $stability), 2);
}
if (!file_exists('composer.lock')) {
    exitWithMessage('Please run "composer install" before you begin, to ensure you have all release utilities installed in the right versions', 4);
}

message('Starting release of ' . $repository, '·');
echo ' · ' . sprintf('Delaying for %s seconds. If you wish to abort, NOW is the time to press CTRL+C: ', $delay);
while (0 < $delay && -- $delay) {
	echo $delay . '..';
	sleep(1);
}
echo PHP_EOL;
message('Okay to proceed');

// Step 1: Confirm a clean working directory or fail.
commandOrFail('git status -s', true);
message('Working directory is clean!');

// Step 2: Checkout staging and master and pull changes
message('Pulling development and master branches from ' . $repository, '·');
commandOrFail('git checkout ' . TARGET_BRANCH .' -q', true);
commandOrFail('git pull ' . $repositoryAddress . ' ' . TARGET_BRANCH .' -q');
commandOrFail('git checkout ' . SOURCE_BRANCH .' -q', true);
commandOrFail('git pull ' . $repositoryAddress . ' ' . SOURCE_BRANCH .' -q');
message(SOURCE_BRANCH . ' and ' . TARGET_BRANCH . ' branches pulled');

// Step 3: Confirm differences exists between `master` and `staging` branches or fail
$diff = commandOrFail('git diff ' . TARGET_BRANCH .'...' . SOURCE_BRANCH);
if (0 === count($diff)) {
	exitWithMessage(' x Branches ' . SOURCE_BRANCH .' and ' . TARGET_BRANCH .' are identical - nothing would be released, stopping.', 1);
}
message(SOURCE_BRANCH . ' and ' . TARGET_BRANCH .' branches are different, good!');

// Step 4: Check out `master` branch or fail.
commandOrFail('git checkout ' . TARGET_BRANCH .' -q');
message('Branch "' . TARGET_BRANCH .'" was checked out');

// Step 5: Merge branch `development` into `master` and force-generate a merge commit or fail on conflicts.
commandOrFail('git merge --no-ff -s recursive -X theirs ' . SOURCE_BRANCH);
message('Branch "' . SOURCE_BRANCH .'" was merged into "' . TARGET_BRANCH .'" with no fast forwarding using "recursive" strategy favoring "their" branch');

// Step 6: Run composer install, run unit tests if config is present
commandOrFail('rm composer.lock && composer install -q', false, 'Composer install failed (master)! Please address the issue and retry');
if (file_exists('phpunit.xml.dist')) {
    commandOrFail('./vendor/bin/phpunit');
    message('Unit tests executed successfully');
} else {
    message('Package does not appear to contain unit tests (no phpunit.xml.dist present)');
}

// Step 7: Update and commit metadata files and stability, create automatic change log if none exists
if (file_exists(sprintf('Documentation/Changelog/%s.md', $version))) {
    message(sprintf('Change log for version %s already exists - good!', $version));
} else {
    commandOrFail('./vendor/bin/changelog ' . $version);
    commandOrFail(sprintf('git add Documentation/Changelog/%s.md CHANGELOG.md', $version));
    commandOrFail(sprintf('git commit -m "[TASK] Create change log for %s"', $version));
    message(sprintf('Main change log updated. Change log was created for %s (%s): Documentation/Changelog/%s.md', $version, $stability, $version));
}
commandOrFail('./vendor/bin/setversion ' . $version . ' ' . $stability);
commandOrFail(sprintf('git commit -a -m "[TER] %s"', $version));
message(sprintf('Version was updated to %s (%s)', $version, $stability));

// Step 8: Create tag that becomes release
commandOrFail('git tag -s ' . $version . ' -a -m "TER ' . $version . ' ' . ucfirst($stability) . '"');
message('Release tagged, annotated and signed');

// Step 9: Push the result directly to upstream repository
commandOrFail('git push ' . $repositoryAddress . ' ' . TARGET_BRANCH .' -q --follow-tags');
commandOrFail('git fetch origin -q');
message('The merged "' . TARGET_BRANCH .'" branch was pushed to ' . $repositoryAddress);

// Step 10: Check out development again, set beta stability and synchronise development and staging branches
commandOrFail('git fetch origin -q');
commandOrFail('git checkout ' . SOURCE_BRANCH .' -q');
commandOrFail('git pull ' . $repositoryAddress . ' ' . SOURCE_BRANCH .' -q');
commandOrFail('git merge --no-ff -s recursive -X theirs ' . TARGET_BRANCH);
if ($stability !== 'beta') {
    commandOrFail('./vendor/bin/setversion ' . $version . ' beta');
    commandOrFail('git commit -a -m "[TASK] Set beta stability"');
}
commandOrFail('git push origin ' . SOURCE_BRANCH .' -q');
commandOrFail('git checkout ' . SOURCE_BRANCH .' -q');
message('You are now back on branch "' . SOURCE_BRANCH .'". Branch "' . SOURCE_BRANCH .'" has been synced with ' . TARGET_BRANCH .' and pushed to upstream');

// Step 11: Report success
message(
    sprintf(
        'The repository was released in version %s stability %s!',
        $version,
        $stability
    )
);

echo ' · Release outlets:' . PHP_EOL;
echo sprintf(' · https://packagist.org/packages/fluidtypo3/%s' . PHP_EOL, $repository);
echo sprintf(' · https://typo3.org/extensions/repository/view/%s' . PHP_EOL, $repository);
