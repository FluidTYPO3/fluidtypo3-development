#!/usr/bin/env php
<?php

require __DIR__ . '/../src/functions.php';

// Declare variables used by script below
$repository = pathinfo(trim(shell_exec('pwd')), PATHINFO_FILENAME);
$logFilesDir = 'Documentation/Changelog';
$dry = in_array('dry', $argv, true);
$version = determineVersionFromArguments($argv);

[$since, $lastVersion] = (function(array $arguments, string $logFilesDir): array {
    $dateFormatMatch = '\\d{4}\\/\\d{2}\\/\\d{2}';
    $timeFormatMatch = '\\d{2}\\:\\d{2}\\:\\d{2}';
    $existingFiles = glob($logFilesDir . '/*.md');
    $lastVersion = '1.0.0';
    $declaredSince = null;

    foreach ($arguments as $argument) {
        if (preg_match('/^' . $dateFormatMatch . ' ' . $timeFormatMatch . '$/', $argument)) {
            $declaredSince = strtotime($argument);
        }
    }

    // Detect the last created change log, but only if "since" was not manually specified as second argument to command
    if (!$declaredSince) {
        $since = 0;
        foreach ($existingFiles as $existingFile) {
            $fp = fopen($existingFile, 'r');
            $firstFourty = fread($fp, 40);
            fclose($fp);

            #$matches = [];
            #preg_match('/\\(' . $dateFormatMatch . '\\)/', $firstFourty, $matches);
            #$dateStamp = trim($matches[0], '()');
            #$created = strtotime($dateStamp);
            $created = filectime($existingFile) + 60;

            if ($created > $since) {
                $since = $created;
                $lastVersion = pathinfo($existingFile, PATHINFO_FILENAME);
            }
        }
    }

    return [$since, $lastVersion];
})($argv, $logFilesDir);

message(sprintf('Writing change log for %s version %s', $repository, $version));

if (!is_dir($logFilesDir)) {
    if ($dry) {
        message('Would create directory: ' . $logFilesDir);
    } else {
        mkdir($logFilesDir, 0777, TRUE);
    }
}

$changelogFile = $logFilesDir . '/' . $version . '.md';
if (file_exists($changelogFile)) {
    exitWithMessage(sprintf(' x Version %s already has a change log - aborting', $version), 1);
}


$since = date('Y/m/d H:i:s', $since);
$until = date('Y/m/d H:i:s');

$lines = commandOrFail(
    sprintf(
        'TZ=UTC0 git log --since="%s" --abbrev-commit --pretty=\'%%ad %%s (Commit %%h by %%an)\' --date=short | egrep \'(\[FEATURE|BUGFIX|REMOVAL\])+\' 2> /dev/null',
        $since,
        $until
    )
);

$changelog = '* ' . implode(PHP_EOL . '* ', $lines);
$changelogHeader = sprintf('## Release: %s (%s)' . PHP_EOL . PHP_EOL, $version, $until);
if (empty($lines)) {
    $changelog = $changelogHeader . sprintf('**%s is a maintenance release with no functional changes.**' . PHP_EOL . PHP_EOL, $version);
} else {
    $changelog = $changelogHeader . $changelog;
}
$changelog .= PHP_EOL . PHP_EOL;
$changelog .= 'Generated by:' . PHP_EOL . PHP_EOL;
$changelog .= '```' . PHP_EOL;
$changelog .= sprintf('git log --since="%s" --until="%s" --abbrev-commit --pretty=\'%%ad %%s (Commit %%h by %%an)\' \\' . PHP_EOL, $since, $until);
$changelog .= '    --date=short | egrep \'(\[FEATURE|BUGFIX|REMOVAL\])+\'`' . PHP_EOL;
$changelog .= '```';
$changelog .= PHP_EOL . PHP_EOL;
$changelog .= sprintf('Full list of changes: https://github.com/FluidTYPO3/%s/compare/%s...%s', $repository, $lastVersion, $version);
$changelog .= PHP_EOL . PHP_EOL;
if (!empty($lines)) {
    $changelog .= '*Please note: the change list above does not contain any TASK commits since they are considered ' . PHP_EOL;
    $changelog .= 'infrastructure-only and not relevant to end users. The full list includes these!*';
    $changelog .= PHP_EOL . PHP_EOL;
}

if ($dry) {
    message('Would write file contents to ' . $changelogFile);
    message('');
    message($changelog);
    message('');
} else {
    file_put_contents($changelogFile, $changelog);
}

$existingFiles = glob($logFilesDir . '/*.md');

usort($existingFiles, function (string $a, string $b) {
    $a = pathinfo($a, PATHINFO_FILENAME);
    $b = pathinfo($b, PATHINFO_FILENAME);
    $a = explode('.', $a);
    $b = explode('.', $b);
    return $a[0] > $b[0] || ($a[0] >= $b[0] && $a[1] > $b[1]) || ($a[0] >= $b[0] && $a[1] >= $b[1] && $a[2] > $b[2]);
});

$mainChangelog = sprintf('Latest release: %s (%s)', $version, $until);
$mainChangelog .= PHP_EOL . PHP_EOL;
$mainChangelog .= 'All previous release change logs:' . PHP_EOL . PHP_EOL;

$logs = array();
foreach ($existingFiles as $existingFile) {
    $existingVersion = pathinfo($existingFile, PATHINFO_FILENAME);
    if (!isset($lastExistingVersion)) {
        $fullChangesNote = 'First release';
    } else {
        $fullChangesNote = sprintf(
            '[Full list of changes](https://github.com/FluidTYPO3/%s/compare/%s...%s)',
            $repository,
            $lastExistingVersion,
            $existingVersion
        );
    }

    $fp = fopen($existingFile, 'r');
    $firstFourty = fread($fp, 40);
    fclose($fp);

    $matches = [];
    preg_match('/\\([0-9]{4}\\/[0-9]{2}\\/[0-9]{2}(\\s{1}\\d{2}\\:\\d{2}\\:\\d{2})?\\)/', $firstFourty, $matches);
    $dateStamp = trim($matches[0], '()');
    $created = strtotime($dateStamp);


    array_unshift($logs, sprintf(
        '* [%s (%s)](%s) %s',
        $existingVersion,
        date('Y/m/d', $created),
        $existingFile,
        $fullChangesNote
    ));
    $lastExistingVersion = $existingVersion;
}

$mainChangelog .= implode(PHP_EOL, $logs);

if ($dry) {
    message('Would write main CHANGELOG file:');
    message('');
    message($mainChangelog);
    message('');
} else {
    file_put_contents('CHANGELOG.md', $mainChangelog);
}
